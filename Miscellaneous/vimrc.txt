"custom mapping 
" : %s/dbg(.*); \\|dbg(.*);\\|#include "debug.h"//g -> replaces with empty space
"  G51kv10km8jvgg"*yG52kv9kn -> magic
"  :u -> undo the changes
"  G61k  moves the cursor 
nmap cc : %s/dbg(.*); \\|dbg(.*);\\|#include "debug.h"//g<CR> : %s/\s\+$//e<CR> : %s/\n\{3,}/\r\r/e<CR> G51kv10km8jvgg"*yG52kv9kn :u<CR> G61k

set encoding=utf-8
set autoread

" Tab, shift tab to move text 
map t? <Nop>
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-d>
vmap <Tab> >gv
vmap <S-Tab> <gv


"Read Input from cmd and Output in cmd [ALT + r]
autocmd filetype cpp nnoremap <A-r> :!cls && echo on && echo ~Compiling....&& g++ -std=c++17 %:p -o %:r.exe && echo ~Compilation Successfull. &echo.~Running....&echo.&echo.--------------------------------&echo.~INPUT: &echo. && %:p:r.exe &echo.&echo.~Running Complete.&echo.<CR>

"Read Input from File and Output in cmd [ALT + y]
autocmd filetype cpp nnoremap <A-y> :!cls && echo on && echo ~Compiling....&& g++ -std=c++17 %:p -o %:r.exe && echo ~Compilation Successfull. &echo.~Running....&echo.&echo.--------------------------------&echo.~INPUT: Read from file. && %:p:r.exe &echo.&echo.~Running Complete.&echo.<CR>

"Read Input from File and Write in File [RALT + u]
autocmd filetype cpp nnoremap <A-u> :!cls && echo on && echo ~Compiling....&& g++ -std=c++17 %:p -o %:r.exe && echo ~Compilation Successfull. &echo.~Running....&echo.&echo.--------------------------------&echo.~INPUT: Read from file.&echo.&echo.--------------------------------&echo.~OUTPUT: Written to file.&echo. && %:p:r.exe &echo.&echo.~Running Complete.&echo.<CR>


" Ctrl + Backspace to delete entire word when cursor is at the end of the word
" Ctrl + delete to delete entire word when cursor is at start of word
" Alt + Backspace deletes everything from cursor to start of line
" Alt + Delete current line
inoremap <C-BS> <C-W>
inoremap <A-BS> <C-U>
inoremap <C-Del> X<Esc>ce
inoremap <A-Del> <Esc>ddi
"Does same thig in normal mode
nnoremap <C-BS> i<C-W><Esc
nnoremap <A-BS> i<C-U><Esc>
nnoremap <C-Del> <Esc>ce
nnoremap <A-Del> dd

"Swap Lines in normal mode
" Alt + uparrow or
" Alt + downarrow
nnoremap <A-Up>   :m -2<CR>
nnoremap <A-Down> :m +1<CR>

" font, line number, bg color etc,
source $VIMRUNTIME/mswin.vim
behave mswin
set ruler
set number
syntax enable
set bg=dark
set guifont=Consolas:h11:cDEFAULT

"Normal vimrc stuff like tabwidth
set guioptions-=T
set tabstop=3
set shiftwidth=3
set expandtab

call plug#begin('~/.vim/plugged')
   Plug 'Yggdroot/indentLine'
   Plug 'itchyny/lightline.vim'
   Plug 'scrooloose/nerdtree'
   Plug 'morhetz/gruvbox'
   Plug 'dense-analysis/ale'
   Plug 'jiangmiao/auto-pairs'
   Plug 'scrooloose/nerdcommenter'
   Plug 'tibabit/vim-templates'
   Plug '907th/vim-auto-save'
   Plug 'djoshea/vim-autoread'
   Plug 'dracula/vim', {'as':'dracula'}
   Plug 'wadackel/vim-dogrun'
   Plug 'whatyouhide/vim-gotham'
   Plug 'mkarmona/materialbox'
   Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
   Plug 'tyrannicaltoucan/vim-deep-space'
   Plug 'cseelus/vim-colors-lucid'
   Plug 'christophermca/meta5'
call plug#end()


" Plugin require : vim - templates
" Used for loading templates on required shortcut keys.
let g:tmpl_author_name = 'raam'
" when problem has only one testcase just press t1 in normal mode
nnoremap t1 :TemplateInit t1<CR>i   
" when problem has multiple testcase just press tn in normal mode
nnoremap tn :TemplateInit tn<CR>i
" :TemplateInit mint1      -> loads modular template with testcases = 1
" :TemplateInit mintn      -> loads modular template 
" :TemplateInit mintfact1  
" :TemplateInit mintfactn
" More Templates like segment tree, HLD, can be saved in template folder.


" Plugin require : nerdcommenter
" Different Types of Comment 
" Simple toggle comment (Alt + /)
map <A-/> <plug>NERDCommenterToggle<CR>
imap <A-/> <Esc><plug>NERDCommenterToggle<CR>i
"Block comment (Alt + [)
map <A-[> <plug>NERDCommenterMinimal<CR>
imap <A-[> <Esc><plug>NERDCommenterMinimal<CR>i
"Sexy comment (Alt + ])
map <A-]> <plug>NERDCommenterSexy<CR>
imap <A-]> <Esc><plug>NERDCommenterSexy<CR>i
"Uncomment (Alt + .)
map <A-.> <plug>NERDCommenterUncomment<CR>
imap <A-.> <Esc><plug>NERDCommenterUncomment<CR>i
vmap m <plug>NERDCommenterUncomment<CR>
vmap n <plug>NERDCommenterMinimal<CR>

" Plugin require : ale
" Use to show errors and warnings without actually compiling code.
" Just save your code and if there are errors it will point an arrow
" to those lines. Sometimes hovering to an arrow gives detail about
" error/warning.
let g:ale_linters = {'c': ['clang'], 'cpp': ['g++']}
let g:ale_cpp_gcc_executable = 'C:\mingw-w64\x86_64-7.3.0-win32-seh-rt_v5-rev0\mingw64\bin\gcc.exe'
let g:ale_cpp_gcc_options="-Wall -O3"
let g:ale_c_gcc_executable = 'C:\mingw-w64\x86_64-7.3.0-win32-seh-rt_v5-rev0\mingw64\bin\gcc.exe'
let g:ale_c_gcc_options="-Wall -O2"


" Plugin require : vim-auto-save, vim-autoread
" Auto Saves whenever you leave Insert mode
" So it always save your code before we use our custom mapping
" ('cc' operates in normal mode)
let g:auto_save = 1  
let g:auto_save_events = ["InsertLeave"]

" Plugin require : IndentLine
" Used for Indentation purpose. 
" Basically replaces tab with given character.  
let g:indentLine_char = '.'
"let g:indentLine_char = '»'
"let g:indentLine_char = '┊'
"let g:indentLine_color_gui = '#ccfada'

" Color Schemes.
let g:dracula_italic = 0
let g:dracula_colorterm = 0
"colorscheme dracula
"colorscheme gruvbox
"colorscheme darkblue
"colorscheme challenger-deep
colorscheme deep-space
"colorscheme meta5
"colorscheme colors-lucid
"colorscheme gotham
"colorscheme dogrun

" Plugin require : nerdtree
" File manager for vim. 
" shortcut set to Alt+Q in normal mode
set splitright
map <A-q> :NERDTreeToggle<CR>
let g:NERDCreateDefaultMappings = 1 
"Sets default working directory for nerdtree.
set belloff=all
set autochdir
cd E:\CP

"refresh vimrc/file (No need to close gvim after changing in vimrc) -> :so $MYVIMRC
